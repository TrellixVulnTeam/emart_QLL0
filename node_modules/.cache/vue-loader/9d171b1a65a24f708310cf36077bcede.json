{"remainingRequest":"C:\\Users\\pc\\vue\\e-metro\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\pc\\vue\\e-metro\\src\\components\\purchaseOrders\\purchaseOrders\\_list.vue?vue&type=style&index=0&id=7516743d&lang=css","dependencies":[{"path":"C:\\Users\\pc\\vue\\e-metro\\src\\components\\purchaseOrders\\purchaseOrders\\_list.vue","mtime":1635426536026},{"path":"C:\\Users\\pc\\vue\\e-metro\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\pc\\vue\\e-metro\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\pc\\vue\\e-metro\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\pc\\vue\\e-metro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\pc\\vue\\e-metro\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5uby1ib3JkZXItY2FyZCAuY2FyZC1mb290ZXIgewogIGJvcmRlci10b3A6IDA7Cn0K"},{"version":3,"sources":["C:\\Users\\pc\\vue\\e-metro\\src\\components\\purchaseOrders\\purchaseOrders\\_list.vue"],"names":[],"mappings":";AAsQA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AACf","file":"C:/Users/pc/vue/e-metro/src/components/purchaseOrders/purchaseOrders/_list.vue","sourceRoot":"","sourcesContent":["<template>\n\n        <card\n          class=\"no-border-card\"\n          body-classes=\"px-0 pb-1 py-3\"\n          footer-classes=\"pb-2\"\n        >\n          <div class=\"row px-4\">\n            <label class=\"mt-2\">Filter:</label>\n            <div class=\"col-2 pr-0\">\n              <base-input\n                name=\"date\"\n                type=\"date\"\n                value=\"2018-11-23\"\n                id=\"example-date-input\"\n              />\n\n            </div>\n            <div class=\"col-2 pr-0\">\n              <base-input\n                type=\"search\"\n                clearable\n                placeholder=\"PO Number\"\n                v-model=\"searchQuery\"\n                aria-controls=\"datatables\"\n              >\n              </base-input>\n            </div>\n          </div>\n          <div>\n\n            <el-table\n              :data=\"queriedData\"\n              row-key=\"id\"\n              header-row-class-name=\"thead-light\"\n              @selection-change=\"selectionChange\"\n            >\n              <el-table-column min-width=\"100\" prop=\"index\" label=\"Sr No\"></el-table-column>\n              <el-table-column min-width=\"150\" prop=\"name\"\n                               label=\"PO Number\">\n              </el-table-column>\n              <el-table-column min-width=\"150\" prop=\"job\"\n                               label=\"Date\">\n              </el-table-column>\n              <el-table-column min-width=\"140\" prop=\"salary\"\n                               label=\"NO. Of Items\">\n              </el-table-column>\n              <el-table-column min-width=\"150\" prop=\"salary\"\n                               label=\"Value\">\n              </el-table-column>\n              <el-table-column min-width=\"150\" prop=\"salary\"\n                               label=\"Status\">\n              </el-table-column>\n              <el-table-column min-width=\"200\" prop=\"salary\"\n                               label=\"Payment Received\">\n              </el-table-column>\n              <el-table-column min-width=\"200\" prop=\"salary\"\n                               label=\"Delivery Status\">\n              </el-table-column>\n\n              <el-table-column min-width=\"180px\" align=\"right\" label=\"Actions\">\n                <template v-slot:default=\"props\">\n                  <div class=\"d-flex\">\n                    <base-button\n                      @click=\"handleLike(props.$index, props.row)\"\n                      class=\"like btn-link\"\n                      type=\"info\"\n                      size=\"sm\"\n                      icon\n                    >\n                      <i class=\"text-white ni ni-like-2\"></i>\n                    </base-button>\n                    <base-button\n                      @click=\"handleEdit(props.$index, props.row)\"\n                      class=\"edit\"\n                      type=\"warning\"\n                      size=\"sm\"\n                      icon\n                    >\n                      <i class=\"text-white ni ni-ruler-pencil\"></i>\n                    </base-button>\n                    <base-button\n                      @click=\"handleDelete(props.$index, props.row)\"\n                      class=\"remove btn-link\"\n                      type=\"danger\"\n                      size=\"sm\"\n                      icon\n                    >\n                      <i class=\"text-white ni ni-fat-remove\"></i>\n                    </base-button>\n                  </div>\n                </template>\n              </el-table-column>\n            </el-table>\n          </div>\n          <template v-slot:footer>\n            <div\n              class=\"col-12 d-flex justify-content-center justify-content-sm-between flex-wrap\"\n            >\n              <div class=\"\">\n                <p class=\"card-category\">\n                  Showing {{ from + 1 }} to {{ to }} of {{ total }} entries\n                </p>\n              </div>\n              <base-pagination\n                class=\"pagination-no-border\"\n                v-model=\"pagination.currentPage\"\n                :per-page=\"pagination.perPage\"\n                :total=\"total\"\n              >\n              </base-pagination>\n            </div>\n          </template>\n        </card>\n\n</template>\n<script>\nimport {\n  ElTable,\n  ElTableColumn,\n  ElSelect,\n  ElOption,\n  ElInput,\n} from \"element-plus\";\n\nimport BasePagination from \"@/components/BasePagination\";\nimport swal from \"sweetalert2\";\nimport users from \"../../../views/Tables/users2\";\n\nexport default {\n  components: {\n    BasePagination,\n\n    [ElSelect.name]: ElSelect,\n    [ElOption.name]: ElOption,\n    [ElTable.name]: ElTable,\n    [ElInput.name]: ElInput,\n    [ElTableColumn.name]: ElTableColumn,\n  },\n  computed: {\n    pagedData() {\n      return this.tableData.slice(this.from, this.to);\n    },\n    /***\n     * Searches through table data and returns a paginated array.\n     * Note that this should not be used for table with a lot of data as it might be slow!\n     * Do the search and the pagination on the server and display the data retrieved from server instead.\n     * @returns {computed.pagedData}\n     */\n    queriedData() {\n      if (!this.searchQuery) {\n        return this.pagedData;\n      }\n      let result = this.tableData.filter((row) => {\n        let isIncluded = false;\n        for (let key of this.propsToSearch) {\n          let rowValue = row[key].toString();\n          if (rowValue.includes && rowValue.includes(this.searchQuery)) {\n            isIncluded = true;\n          }\n        }\n        return isIncluded;\n      });\n\n      return result.slice(this.from, this.to);\n    },\n    to() {\n      let highBound = this.from + this.pagination.perPage;\n      if (this.total < highBound) {\n        highBound = this.total;\n      }\n      return highBound;\n    },\n    from() {\n      return this.pagination.perPage * (this.pagination.currentPage - 1);\n    },\n    total() {\n      return this.searchedData.length > 0\n        ? this.searchedData.length\n        : this.tableData.length;\n    },\n  },\n  data() {\n    return {\n      pagination: {\n        perPage: 10,\n        currentPage: 1,\n        perPageOptions: [5, 10, 25, 50],\n        total: 0,\n      },\n      searchQuery: \"\",\n      propsToSearch: [\"name\", \"email\"],\n      tableData: users,\n      fuseSearch: null,\n      searchedData: [],\n    };\n  },\n  methods: {\n    handleLike(index, row) {\n      const swalWithBootstrapButtons1 = swal.mixin({\n        customClass: {\n          confirmButton: \"btn btn-success btn-fill\",\n        },\n        buttonsStyling: false,\n      });\n\n      swalWithBootstrapButtons1.fire({\n        title: `You liked ${row.name}`,\n      });\n    },\n    handleEdit(index, row) {\n      const swalWithBootstrapButtons2 = swal.mixin({\n        customClass: {\n          confirmButton: \"btn btn-info btn-fill\",\n        },\n        buttonsStyling: false,\n      });\n\n      swalWithBootstrapButtons2.fire({\n        title: `You want to edit ${row.name}`,\n      });\n    },\n    handleDelete(index, row) {\n      const swalWithBootstrapButtons3 = swal.mixin({\n        customClass: {\n          confirmButton: \"btn btn-success btn-fill\",\n          cancelButton: \"btn btn-danger btn-fill\",\n        },\n        buttonsStyling: false,\n      });\n      swalWithBootstrapButtons3\n        .fire({\n          title: \"Are you sure?\",\n          text: `You won't be able to revert this!`,\n          showCancelButton: true,\n          confirmButtonText: \"Yes, delete it!\",\n        })\n        .then((result) => {\n          if (result.value) {\n            this.deleteRow(row);\n            swalWithBootstrapButtons3.fire({\n              title: \"Deleted!\",\n              text: `You deleted ${row.name}`,\n            });\n          }\n        });\n    },\n    deleteRow(row) {\n      let indexToDelete = this.tableData.findIndex(\n        (tableRow) => tableRow.id === row.id\n      );\n      if (indexToDelete >= 0) {\n        this.tableData.splice(indexToDelete, 1);\n      }\n    },\n    selectionChange(selectedRows) {\n      this.selectedRows = selectedRows;\n    },\n  },\n};\n</script>\n<style>\n.no-border-card .card-footer {\n  border-top: 0;\n}\n</style>\n"]}]}